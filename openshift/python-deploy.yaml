apiVersion: v1
kind: Template
metadata: {}
parameters:
- name: NAME
- name: SUFFIX
- name: VERSION
- name: HOST
objects:
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      shared: "true"
    name: ${NAME}
  spec:
    lookupPolicy:
      local: false
  status:
    dockerImageRepository: ""
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    name: ${NAME}${SUFFIX}
  spec:
    replicas: 1
    selector:
      deploymentconfig: ${NAME}${SUFFIX}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 2
        maxUnavailable: 1
        timeoutSeconds: 180
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        creationTimestamp: null
        labels:
          deploymentconfig: ${NAME}${SUFFIX}
      spec:
        containers:
        - image: " "
          env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: aws_access_key_id
                  name: aws-s3-secret
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: aws_secret_access_key
                  name: aws-s3-secret
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  key: app-db-name
                  name: ${NAME}-pgsql${SUFFIX}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: app-db-password
                  name: ${NAME}-pgsql${SUFFIX}
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  key: app-db-username
                  name: ${NAME}-pgsql${SUFFIX}
            - name: DB_HOSTNAME
              value: ${NAME}-pgsql-master${SUFFIX}
            - name: SP_ENDPOINT_TEST
              valueFrom:
                configMapKeyRef:
                  key: SP_ENDPOINT_TEST
                  name: snowplow-endpoints
            - name: SP_ENDPOINT_PROD
              valueFrom:
                configMapKeyRef:
                  key: SP_ENDPOINT_PROD
                  name: snowplow-endpoints
            - name: SERVING_CERT_PATH
              value: /etc/x509/https
          name: app
          imagePullPolicy: Always
          ports:
          - containerPort: 8443
            protocol: TCP
          resources:
            requests:
              cpu: 60m
              memory: 64Mi
            limits:
              cpu: 80m
              memory: 96Mi
          volumeMounts:
          - mountPath: /etc/x509/https
            name: app-x509-https-volume
            readOnly: true
        volumes:
        - name: app-x509-https-volume
          secret:
            secretName: ${NAME}-x509-https-secret${SUFFIX}
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - app
        from:
          kind: ImageStreamTag
          name: ${NAME}:${VERSION}
      type: ImageChange
  status:
    availableReplicas: 0
    latestVersion: 0
    observedGeneration: 0
    replicas: 0
    unavailableReplicas: 0
    updatedReplicas: 0
- apiVersion: autoscaling/v1
  kind: HorizontalPodAutoscaler
  metadata:
    creationTimestamp: null
    labels: null
    name: ${NAME}${SUFFIX}
  spec:
    maxReplicas: 5
    minReplicas: 2
    scaleTargetRef:
      apiVersion: v1
      kind: DeploymentConfig
      name: ${NAME}${SUFFIX}
    targetCPUUtilizationPercentage: 85
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
      service.alpha.openshift.io/serving-cert-secret-name: ${NAME}-x509-https-secret${SUFFIX}
    creationTimestamp: null
    name: ${NAME}${SUFFIX}
  spec:
    ports:
    - name: 8443-tcp
      port: 8443
      protocol: TCP
      targetPort: 8443
    selector:
      deploymentconfig: ${NAME}${SUFFIX}
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      # restrict networking traffic to the BCGov OCP CIDR range
      haproxy.router.openshift.io/ip_whitelist: 142.34.143.128/26
    creationTimestamp: null
    name: ${NAME}${SUFFIX}
  spec:
    host: ${HOST}
    path: ""
    port:
      targetPort: 8443-tcp
    tls:
      insecureEdgeTerminationPolicy: None
      termination: reencrypt
    to:
      kind: Service
      name: ${NAME}${SUFFIX}
      weight: 100
    wildcardPolicy: None
